message Queue:-Message queuing allows applications to communicate by sending messages to each other.
               The message queue provides a temporary message storage when the destination program is busy or not connected. 
               
                               
       A message queue provides an asynchronous communications protocol, a system that puts a message onto a message 
       queue does not require an immediate response to continuing processing. Email is probably the best example of 
       asynchronous messaging. When an email is sent can the sender continue processing other things without an immediate
       response from the receiver. This way of handling messages decouple the producer from the consumer.The producer and
       the consumer of the message do not need to interact with the message queue at the same time. 
       
       
       
 System calls used for message queues:

ftok(): is use to generate a unique key.

msgget(): either returns the message queue identifier for a newly created message 
          queue or returns the identifiers for a queue which exists with the same key value.

msgsnd(): Data is placed on to a message queue by calling msgsnd().

msgrcv(): messages are retrieved from a queue.

msgctl(): It performs various operations on a queue. Generally it is use to destroy message queue.




example:-

/***********************************message queue  Recieve **************************************************/

// C Program for Message Queue (Reader Process)
#include <stdio.h>
#include <sys/ipc.h>          //sys for systemcall in ipc
#include <sys/msg.h>          //massege que feature of kernal
 
// structure for message queue
struct mesg_buffer {
    long mesg_type;
    char mesg_text[100];
} message;

int main()
{
    //variable to store unique key 
    key_t key;
    int msgid;
 
    // ftok to generate unique key
    key = ftok("progfile", 65);
 
    // msgget creates a message queue
    // and returns identifier
    msgid = msgget(key, 0666 | IPC_CREAT);

    // msgrcv to receive message
    while(1){
        //recieve the message from message queue which have the identifier msgid and store it message pointer
    msgrcv(msgid, &message, sizeof(message), 1, 0);
 
    // display the message
    printf("Data Received is : %s \n", message.mesg_text);
    }
    // to destroy the message queue
    msgctl(msgid, IPC_RMID, NULL);
 
    return 0;
}
/******************************************************************************************************************/


/**************************************message queue send*********************************************************/
// C Program for Message Queue (Writer Process)
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
 
// structure for message queue
struct mesg_buffer {
    long mesg_type;
    char mesg_text[100];
} message;
 
int main()
{
    key_t key;
    int msgid;
 
    // ftok to generate unique key
    key = ftok("progfile", 65);
 
    // msgget creates a message queue
    // and returns identifier
    msgid = msgget(key, 0666 | IPC_CREAT);
    message.mesg_type = 1;
 while(1){
    printf("Write Data : ");
    gets(message.mesg_text);
    // msgsnd to send message
    msgsnd(msgid, &message, sizeof(message), 0);
 }

    // display the message
    printf("Data send is : %s \n", message.mesg_text);
 
    return 0;
}
/**************************************************************************************************************/
















